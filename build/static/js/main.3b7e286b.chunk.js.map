{"version":3,"sources":["utils/api/index.js","Layout/comp/Header.js","Layout/error/NotFound.js","Layout/comp/Buttons.js","Layout/deck/DeckPreview.js","Layout/deck/DeckList.js","Layout/comp/Breadcrumb.js","Layout/form/FormArea.js","Layout/form/Form.js","Layout/card/CardView.js","Layout/deck/DeckView.js","Layout/card/Card.js","Layout/error/NotEnoughCards.js","Layout/deck/DeckStudy.js","Layout/deck/Deck.js","Layout/index.js","App.js","index.js"],"names":["API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard","append","Header","className","NotFound","Buttons","names","removeDeck","removeCard","buttonsJSX","push","href","type","xmlns","width","height","fill","viewBox","d","fillRule","onClick","propTypes","PropTypes","arrayOf","oneOf","isRequired","number","func","DeckPreview","length","description","DeckList","decks","decksJSX","map","Breadcrumb","page","deckName","aria-label","currentPage","FormArea","keys","idx","handleChange","formData","htmlFor","charAt","toUpperCase","slice","onChange","value","style","rows","Form","edit","addDeck","addCard","editDeck","editCard","abortController","history","useHistory","useParams","mode","initForm","useState","setDeck","setFormData","front","back","target","event","preventDefault","newItem","parseInt","useEffect","getDeck","abort","onSubmit","CardView","DeckView","Object","cardsJSX","Card","cardNum","flipped","flip","next","NotEnoughCards","DeckStudy","setCardNum","setFlipped","window","confirm","Deck","path","Layout","setDecks","AbortController","getDecks","created","edited","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAIMA,EAAeC,mIAAYD,cAAgB,wBAK3CE,EAAU,IAAIC,QAapB,SAASC,EAAWC,GACqBA,EAA/BC,MACR,OADA,YAAuCD,EAAvC,W,SAoBaE,E,kFAAf,WAAyBC,EAAKC,EAASC,GAAvC,eAAAC,EAAA,+EAE2BC,MAAMJ,EAAKC,GAFtC,aAEUI,EAFV,QAIiBC,OAAS,KAAOD,EAASC,OAAS,KAJnD,sBAKY,IAAIC,MAAJ,UAAaF,EAASC,OAAtB,cAAkCD,EAASG,aALvD,UAQ4B,MAApBH,EAASC,OARjB,yCASa,MATb,wBAYiBD,EAASI,OAZ1B,8EAeuB,eAAf,KAAMC,KAfd,uBAgBMC,QAAQC,MAAM,KAAMC,OAhB1B,sCAmBWC,QAAQC,QAAQb,IAnB3B,2D,sBA4BO,SAAec,EAAtB,kC,4CAAO,WAAyBC,GAAzB,eAAAd,EAAA,6DACCH,EADD,UACUR,EADV,gCAEQO,EAAUC,EAAK,CAAEiB,UAAU,IAFnC,oF,sBAeA,SAAeC,EAAtB,oC,4CAAO,WAA0BrB,EAAMoB,GAAhC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,UAECS,EAAU,CACdkB,OAAQ,OACRzB,UACA0B,KAAMC,KAAKC,UAAU1B,EAAWC,IAChCoB,UANG,SAQQlB,EAAUC,EAAKC,EAAS,IARhC,oF,sBAoBA,SAAesB,EAAtB,oC,4CAAO,WAAwBC,EAAQP,GAAhC,eAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCgC,EADhC,0BAEQzB,EAAUC,EAAK,CAAEiB,UAAU,IAFnC,oF,sBAcA,SAAeQ,EAAtB,oC,4CAAO,WAA0BC,EAAaT,GAAvC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCkC,EAAYC,GAD5C,iBAEC1B,EAAU,CACdkB,OAAQ,MACRzB,UACA0B,KAAMC,KAAKC,UAAU1B,EAAW8B,IAChCT,UANG,SAQQlB,EAAUC,EAAKC,EAASyB,GARhC,oF,sBAoBA,SAAeE,EAAtB,oC,4CAAO,WAA0BJ,EAAQP,GAAlC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCgC,GAC/BvB,EAAU,CAAEkB,OAAQ,SAAUF,UAF/B,SAGQlB,EAAUC,EAAKC,GAHvB,oF,sBAgCA,SAAe4B,EAAtB,sC,4CAAO,WAA0BL,EAAQM,EAAMb,GAAxC,iBAAAd,EAAA,6DAGCH,EAHD,UAGUR,EAHV,UAILsC,EAAKN,OAASO,OAAOP,GACfvB,EAAU,CACdkB,OAAQ,OACRzB,UACA0B,KAAMC,KAAKC,UAAUQ,GACrBb,UATG,SAWQlB,EAAUC,EAAKC,EAAS6B,GAXhC,oF,sBAuBA,SAAeE,EAAtB,oC,4CAAO,WAAwBC,EAAQhB,GAAhC,eAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCyC,GADhC,SAEQlC,EAAUC,EAAK,CAAEiB,UAAU,IAFnC,oF,sBAcA,SAAeiB,EAAtB,oC,4CAAO,WAA0BC,EAAalB,GAAvC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgC2C,EAAYR,IAC3C1B,EAAU,CACdkB,OAAQ,MACRzB,UACA0B,KAAMC,KAAKC,UAAUa,IALlB,SAOQpC,EAAUC,EAAKC,EAASkC,GAPhC,oF,sBAmBA,SAAeC,EAAtB,oC,4CAAO,WAA0BH,EAAQhB,GAAlC,iBAAAd,EAAA,6DACCH,EADD,UACUR,EADV,kBACgCyC,GAC/BhC,EAAU,CAAEkB,OAAQ,SAAUF,UAF/B,SAGQlB,EAAUC,EAAKC,GAHvB,oF,sBA1NPP,EAAQ2C,OAAO,eAAgB,oB,WCGhBC,MAXf,WACE,OACE,wBAAQC,UAAU,oBAAlB,SACE,sBAAKA,UAAU,uBAAf,UACE,oBAAIA,UAAU,YAAd,2BACA,mBAAGA,UAAU,OAAb,kCCGOC,MARf,WACE,OACE,qBAAKD,UAAU,WAAf,SACE,8C,wBCQN,SAASE,EAAT,GAAqE,IAAD,EAAjDC,EAAiD,EAAjDA,MAAOlB,EAA0C,EAA1CA,OAAQS,EAAkC,EAAlCA,OAAQU,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,WAC9CC,EAAa,GAD+C,cAEjDH,GAFiD,IAElE,2BAAwB,CACtB,OADsB,SAEpB,IAAK,OACHG,EAAWC,KACT,mBAAcC,KAAI,iBAAYvB,GAA9B,SACE,yBAAQwB,KAAK,SAAST,UAAU,yBAAhC,UACE,sBACEU,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,KAAK,eACLb,UAAU,iBACVc,QAAQ,YANV,UAQE,sBAAMC,EAAE,iDACR,sBAAMA,EAAE,mGAVZ,eADK,SAiBT,MAEF,IAAK,QACHT,EAAWC,KACT,mBAAeC,KAAI,iBAAYvB,EAAZ,UAAnB,SACE,yBAAQwB,KAAK,SAAST,UAAU,uBAAhC,UACE,sBACEU,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,KAAK,eACLb,UAAU,8BACVc,QAAQ,YANV,UAQE,sBACEE,SAAS,UACTD,EAAE,sEAEJ,sBAAMA,EAAE,sJACR,sBAAMA,EAAE,yMAdZ,gBADK,UAqBT,MAEF,IAAK,cACHT,EAAWC,KACT,yBAEEE,KAAK,SACLT,UAAU,6BACViB,QAAS,kBAAMb,EAAWnB,IAJ5B,iBAOE,qBACEyB,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,KAAK,eACLb,UAAU,mBACVc,QAAQ,YANV,SAQE,sBAAMC,EAAE,mTAdN,WAkBR,MAEF,IAAK,cACHT,EAAWC,KACT,yBAEEE,KAAK,SACLT,UAAU,6BACViB,QAAS,kBAAMZ,EAAWX,IAJ5B,iBAOE,qBACEgB,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,KAAK,eACLb,UAAU,mBACVc,QAAQ,YANV,SAQE,sBAAMC,EAAE,mTAdN,WAkBR,MAEF,IAAK,YACHT,EAAWC,KACT,mBAAmBC,KAAI,iBAAYvB,EAAZ,SAAvB,SACE,yBAAQwB,KAAK,SAAST,UAAU,yBAAhC,UACE,qBACEU,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,KAAK,eACLb,UAAU,oBACVc,QAAQ,YANV,SAQE,sBAAMC,EAAE,6bATZ,eADK,cAgBT,MAEF,IAAK,YACHT,EAAWC,KACT,mBAAmBC,KAAI,iBAAYvB,EAAZ,kBAA4BS,EAA5B,SAAvB,SACE,yBACEe,KAAK,SACLT,UAAU,qCAFZ,UAIE,qBACEU,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,KAAK,eACLb,UAAU,oBACVc,QAAQ,YANV,SAQE,sBAAMC,EAAE,6bAZZ,eADK,cAmBT,MAEF,IAAK,WACHT,EAAWC,KACT,mBAAkBC,KAAI,iBAAYvB,EAAZ,cAAtB,SACE,yBAAQwB,KAAK,SAAST,UAAU,uBAAhC,UACE,qBACEU,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,KAAK,eACLb,UAAU,aACVc,QAAQ,YANV,SAQE,sBAAMC,EAAE,4GATZ,gBADK,aAgBT,MAEF,IAAK,WACHT,EAAWC,KACT,mBAAkBC,KAAK,aAAvB,SACE,yBAAQC,KAAK,SAAST,UAAU,yBAAhC,UACE,qBACEU,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,KAAK,eACLb,UAAU,aACVc,QAAQ,YANV,SAQE,sBAAMC,EAAE,4GATZ,kBADK,aAgBT,MAEF,QACE,OAAO,OApLqD,8BAwLlE,OAAOT,EAGTJ,EAAQgB,UAAY,CAClBf,MAAOgB,IAAUC,QACfD,IAAUE,MAAM,CACd,OACA,QACA,cACA,cACA,YACA,YACA,WACA,cAEFC,WACFrC,OAAQkC,IAAUI,OAClB7B,OAAQyB,IAAUI,OAClBnB,WAAYe,IAAUK,KACtBnB,WAAYc,IAAUK,MAGTtB,QCrLAuB,MA5Bf,YAA4C,IAArBnE,EAAoB,EAApBA,KAAM8C,EAAc,EAAdA,WAC3B,OACE,qBAAKJ,UAAU,YAAYZ,GAAE,eAAU9B,EAAK8B,IAA5C,SACE,sBAAKY,UAAU,YAAf,UACE,oBAAGA,UAAU,4CAAb,UACG1C,EAAKC,MAAMmE,OADd,YAGA,oBAAI1B,UAAU,aAAd,SAA4B1C,EAAKa,OACjC,mBAAG6B,UAAU,YAAb,SAA0B1C,EAAKqE,cAC/B,cAAC,EAAD,CACExB,MAAO,CAAC,OAAQ,QAAS,eACzBlB,OAAQ3B,EAAK8B,GACbgB,WAAYA,UCcPwB,MAxBf,YAA0C,IAAtBC,EAAqB,EAArBA,MAAOzB,EAAc,EAAdA,WACnB0B,EAAWD,EAAME,KAAI,SAACzE,GAAD,OACzB,cAAC,EAAD,CAA2BA,KAAMA,EAAM8C,WAAYA,GAAjC9C,EAAK8B,OAGzB,OACE,sBAAKA,GAAG,YAAR,UACE,cAAC,EAAD,CAASe,MAAO,CAAC,cAChB2B,M,gBCmEQE,MA1Ef,YAAyD,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,SAAUjD,EAAkB,EAAlBA,OAAQS,EAAU,EAAVA,OAwC5C,OACE,qBAAKN,GAAG,aAAR,SACE,qBAAK+C,aAAW,aAAhB,SACE,qBAAInC,UAAU,aAAd,UACE,oBAAIA,UAAU,kBAAd,SACE,oBAAGQ,KAAK,IAAR,UACE,qBACEE,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,KAAK,eACLb,UAAU,wBACVc,QAAQ,YANV,SAQE,sBAAMC,EAAE,iRATZ,YAlBHmB,GAAajD,EAGhB,oBAAIe,UAAS,0BAA8B,SAATiC,EAAkB,SAAW,IAA/D,SACY,SAATA,EACCC,EAEA,mBAAG1B,KAAI,iBAAYvB,GAAnB,SAA8BiD,MAPH,KAtBf,WAClB,OAAQD,GACN,IAAK,QACH,OAAO,oBAAIjC,UAAU,yBAAd,mBACT,IAAK,cACH,OAAO,oBAAIA,UAAU,yBAAd,yBACT,IAAK,YACH,OAAO,oBAAIA,UAAU,yBAAd,uBACT,IAAK,cACH,OAAO,oBAAIA,UAAU,yBAAd,sBACT,IAAK,YACH,OAAO,qBAAIA,UAAU,yBAAd,uBAAkDN,KAC3D,QACE,OAAO,MA0CJ0C,WCvBIC,MAtCf,YAA0D,IAAtCC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,IAAKC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,SAC5C,OACC,sBAAKrD,GAAIkD,EAAKC,GAAd,UACC,uBAAOG,QAASJ,EAAKC,GAArB,SACED,EAAKC,GAAKI,OAAO,GAAGC,cAAgBN,EAAKC,GAAKM,MAAM,KAGtD,uBAEc,SAAdP,EAAKC,GACL,uBACCpE,KAAK,OACLiB,GAAG,OACHqB,KAAK,OACLqC,SAAUN,EACVO,MAAON,EAASH,EAAKC,IACrBS,MAAO,CAAErC,MAAO,UAEjB,0BACCxC,KAAMmE,EAAKC,GACXnD,GAAIkD,EAAKC,GACTO,SAAUN,EACVO,MAAON,EAASH,EAAKC,IACrBS,MAAO,CAAErC,MAAO,QAChBsC,KAAK,UCmIMC,MApJf,YAAsF,IAAD,EAArEzC,EAAqE,EAArEA,KAAM0C,EAA+D,EAA/DA,KAAMC,EAAyD,EAAzDA,QAASC,EAAgD,EAAhDA,QAASC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,gBAC3DC,EAAUC,cAChB,EAAyBC,cAAnB1E,EAAN,EAAMA,OAAQS,EAAd,EAAcA,OACRkE,EAAOT,EAAO,OAAS,SACvBb,EAAgB,SAAT7B,EAAkB,CAAC,OAAQ,eAAiB,CAAC,QAAS,QAE7DoD,GAAQ,mBACZvB,EAAK,GAAK,IADE,cAEZA,EAAK,GAAK,IAFE,GAKd,EAAwBwB,mBAAS,IAAjC,mBAAOxG,EAAP,KAAayG,EAAb,KACA,EAAgCD,mBAAS,eAAID,IAA7C,mBAAOpB,EAAP,KAAiBuB,EAAjB,KAZoF,4CA2BpF,8BAAApG,EAAA,yDACa,SAAT6C,GAAoB0C,EADxB,0EAIyBnE,EAASC,EAAQuE,EAAgB9E,QAJ1D,UAIQZ,EAJR,OAKEiG,EAAQjG,IAGLqF,EARL,qBASMrF,GAAqB,SAAT2C,EATlB,iBAUIoD,EAASvB,EAAK,IAAMxE,EAASK,KAC7B0F,EAASvB,EAAK,IAAMxE,EAAS6D,YAXjC,2BAaoB,SAATlB,EAbX,kCAcuBhB,EAASC,EAAQ8D,EAAgB9E,QAdxD,SAcUa,EAdV,UAgBKsE,EAASvB,EAAK,IAAM/C,EAAK0E,MACzBJ,EAASvB,EAAK,IAAM/C,EAAK2E,MAjB9B,QAoBGF,EAAY,eAAIH,IApBnB,6DAwBoB,eAAf,KAAM1F,KAxBX,uFA3BoF,sBA8DpF,SAASqE,EAAT,GAAmC,IAAX2B,EAAU,EAAVA,OACvBH,EAAY,2BAAIvB,GAAL,kBAAgB0B,EAAOhG,KAAOgG,EAAOpB,SA/DmC,4CAsEpF,WAA4BqB,GAA5B,mBAAAxG,EAAA,yDACCwG,EAAMC,iBADP,mBAGG/B,EAAK,GAAKG,EAASH,EAAK,KAH3B,cAIGA,EAAK,GAAKG,EAASH,EAAK,KAFtBgC,EAFL,EAOInB,IACFmB,EAAO,GAAkB,SAAT7D,EAAkB8D,SAAStF,GAAUsF,SAAS7E,GAElD,SAATe,IACF6D,EAAO,OAAaC,SAAStF,MAInBkE,EAfb,oBAgBY,SAAT1C,EAhBH,iCAgB2B6C,EAASgB,GAhBpC,4DAgBqDf,EAASe,GAhB9D,iEAiBY,SAAT7D,EAjBH,kCAiB2B2C,EAAQkB,GAjBnC,6DAiBoDjB,EAAQiB,EAASrF,GAjBrE,8CAeOsD,EAfP,KAoBKY,GAAiB,SAAT1C,IACXxB,EAASsD,GAGVkB,EAAQlD,KAAR,iBAAuBtB,IAxBxB,6CAtEoF,sBAiGpF,OAlFAuF,qBAAU,WAGT,OAlBmF,mCAgBnFC,GAEO,WACNjB,EAAgBkB,WAGf,IA4EF,sBAAKtF,GAAE,UAAKqB,EAAL,iBAAkBmD,GAAzB,UACC,cAAC,EAAD,CACC3B,KAAI,UAAK2B,EAAL,YAAanD,GACjByB,SAAU5E,EAAOA,EAAKa,KAAO,KAC7Bc,OAAQsF,SAAStF,GACjBS,OAAQA,EAAS6E,SAAS7E,GAAU,OAGrC,+BACW,SAATe,GAAA,UAAsBnD,EAAKa,KAA3B,MACAyF,EAAKjB,OAAO,GAAGC,cAAgBgB,EAAKf,MAAM,GAF5C,OAGEpC,EAAKkC,OAAO,GAAGC,cAAgBnC,EAAKoC,MAAM,GAH5C,UAMA,uBAAM8B,SAhH4E,4CAgHlF,UACC,cAAC,EAAD,CACCrC,KAAMA,EACNC,IAAK,EACLC,aAAcA,EACdC,SAAUA,IAGX,cAAC,EAAD,CACCH,KAAMA,EACNC,IAAK,EACLC,aAAcA,EACdC,SAAUA,IAGX,mBAAGjC,KAAK,IAAR,SACC,wBAAQR,UAAU,yBAAyBS,KAAK,SAAhD,sBAGD,wBAAQT,UAAU,uBAAuBS,KAAK,SAA9C,2BC/GWmE,MA3Bf,YAAyC,IAArBrF,EAAoB,EAApBA,KAAMc,EAAc,EAAdA,WACxB,OACE,qBAAIL,UAAU,aAAd,UACE,oBAAIA,UAAU,kBAAd,SAAiCT,EAAK0E,QACtC,oBAAIjE,UAAU,kBAAd,SAAiCT,EAAK2E,OACtC,oBAAIlE,UAAU,kBAAd,SACE,cAAC,EAAD,CACEG,MAAO,CAAC,cAAe,aACvBE,WAAYA,EACZpB,OAAQM,EAAKN,OACbS,OAAQH,EAAKH,WCgDRyF,MAvDf,YAAgE,IAA5CzE,EAA2C,EAA3CA,WAAYC,EAA+B,EAA/BA,WAAYmD,EAAmB,EAAnBA,gBAC1C,EAAwBM,mBAAS,IAAjC,mBAAOxG,EAAP,KAAayG,EAAb,KACQ9E,EAAW0E,cAAX1E,OAFqD,4CAc7D,4BAAArB,EAAA,+EAE2BoB,EAASC,EAAQuE,EAAgB9E,QAF5D,OAEUZ,EAFV,OAGIiG,EAAQjG,GAHZ,mDAKuB,eAAf,KAAMK,KALd,sFAd6D,sBAyB7D,GAtBAqG,qBAAU,WAGR,OAN2D,mCAI3DC,GAEO,WACLjB,EAAgBkB,YAkBa,IAA7BI,OAAOxC,KAAKhF,GAAMoE,OAAc,OAAO,KAE3C,IAAMqD,EAAWzH,EAAKC,MAAMwE,KAAI,SAACxC,GAAD,OAC9B,cAAC,EAAD,CAAwBA,KAAMA,EAAMc,WAAYA,GAAjCd,EAAKH,OAGtB,OACE,sBAAKA,GAAE,eAAU9B,EAAK8B,GAAf,SAAP,UACE,cAAC,EAAD,CAAY8C,SAAU5E,EAAKa,KAAMc,OAAQ3B,EAAK8B,GAAI6C,KAAK,SACvD,6BAAK3E,EAAKa,OACV,4BAAIb,EAAKqE,cAET,cAAC,EAAD,CACExB,MAAO,CAAC,YAAa,QAAS,WAAY,eAC1ClB,OAAQ3B,EAAK8B,GACbgB,WAAYA,IAGd,oBAAIJ,UAAU,OAAd,mBACC+E,MCVQC,MAnCf,YAAuD,IAAvC1H,EAAsC,EAAtCA,KAAM2H,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KAC5C,OACE,qBAAKpF,UAAU,YAAYZ,GAAE,eAAU9B,EAAK8B,IAA5C,SACE,sBAAKY,UAAU,YAAf,UACE,qBAAIA,UAAU,aAAd,kBACQiF,EAAU,EADlB,OACyB3H,EAAKC,MAAMmE,UAEpC,mBAAG1B,UAAU,YAAb,SACG1C,EAAKC,MAAM0H,GAASC,EAAU,OAAS,WAE1C,wBAAQzE,KAAK,SAAST,UAAU,yBAAyBiB,QAASkE,EAAlE,kBAGCD,GACC,wBAAQzE,KAAK,SAAST,UAAU,uBAAuBiB,QAASmE,EAAhE,wBCFKC,OAhBf,YAAyC,IAAf3D,EAAc,EAAdA,OAAQtC,EAAM,EAANA,GACjC,OACC,sBAAKA,GAAG,aAAR,UACC,mDACA,+EAAkDsC,EAAlD,0BAEA,cAAC,EAAD,CAASvB,MAAO,CAAC,YAAalB,OAAQG,QC+E1BkG,OAlFf,YAAyC,IAApB9B,EAAmB,EAAnBA,gBACnB,EAA8BM,mBAAS,GAAvC,mBAAOmB,EAAP,KAAgBM,EAAhB,KACA,EAA8BzB,oBAAS,GAAvC,mBAAOoB,EAAP,KAAgBM,EAAhB,KACM/B,EAAUC,cAChB,EAAwBI,mBAAS,IAAjC,mBAAOxG,EAAP,KAAayG,EAAb,KACQ9E,EAAW0E,cAAX1E,OAL8B,4CAkBtC,4BAAArB,EAAA,+EAE2BoB,EAASC,EAAQuE,EAAgB9E,QAF5D,OAEUZ,EAFV,OAGIiG,EAAQjG,GAHZ,mDAKuB,eAAf,KAAMK,KALd,sFAlBsC,sBA6BtC,OArBAqG,qBAAU,WAGR,OAXoC,mCASpCC,GAEO,WACLjB,EAAgBkB,YAiBa,IAA7BI,OAAOxC,KAAKhF,GAAMoE,OAAqB,KAEtCpE,EA2BH,sBAAK8B,GAAE,eAAU9B,EAAK8B,GAAf,UAAP,UACE,cAAC,EAAD,CAAY8C,SAAU5E,EAAKa,KAAMc,OAAQ3B,EAAK8B,GAAI6C,KAAK,UACvD,yCAAY3E,EAAKa,QAEhBb,EAAKC,MAAMmE,OAAS,EACnB,cAAC,EAAD,CAEEpE,KAAMA,EACN2H,QAASA,EACTC,QAASA,EACTC,KAhCR,WACEK,GAAYN,IAgCNE,KA7BR,WACMH,EAAU,IAAM3H,EAAKC,MAAMmE,OAE3B+D,OAAOC,QAAP,gEAIAH,EAAW,GAEX9B,EAAQlD,KAAK,KAGfgF,EAAWN,EAAU,GAEvBO,GAAW,KAUAlI,EAAKC,MAAM0H,GAAS7F,IAQ3B,cAAC,GAAD,CAAgBsC,OAAQpE,EAAKC,MAAMmE,OAAQtC,GAAI9B,EAAK8B,QAzCxC,MCsCLuG,OAjEf,YAOI,IANFrC,EAMC,EANDA,SACAlD,EAKC,EALDA,WACAiD,EAIC,EAJDA,QACAE,EAGC,EAHDA,SACAlD,EAEC,EAFDA,WACAmD,EACC,EADDA,gBAEQvE,EAAW0E,cAAX1E,OAER,OACE,qBAAKG,GAAE,eAAUH,GAAjB,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO2G,KAAK,uBAAZ,SACE,cAAC,GAAD,CAAWpC,gBAAiBA,MAG9B,cAAC,IAAD,CAAOoC,KAAK,sBAAZ,SACE,cAAC,EAAD,CACEnF,KAAK,OACL0C,MAAM,EACNG,SAAUA,EACVE,gBAAiBA,MAIrB,cAAC,IAAD,CAAOoC,KAAK,2BAAZ,SACE,cAAC,EAAD,CACEnF,KAAK,OACL0C,MAAM,EACNE,QAASA,EACTG,gBAAiBA,MAIrB,cAAC,IAAD,CAAOoC,KAAK,oCAAZ,SACE,cAAC,EAAD,CACEnF,KAAK,OACL0C,MAAM,EACNI,SAAUA,EACVC,gBAAiBA,MAIrB,cAAC,IAAD,CAAOoC,KAAK,iBAAZ,SACE,cAAC,EAAD,CACExF,WAAYA,EACZC,WAAYA,EACZmD,gBAAiBA,YCgGdqC,OA1If,WACE,MAA0B/B,mBAAS,IAAnC,mBAAOjC,EAAP,KAAciE,EAAd,KACMtC,EAAkB,IAAIuC,gBACtBrH,EAAS8E,EAAgB9E,OACzB+E,EAAUC,cAJA,SAgBDsC,IAhBC,2EAgBhB,4BAAApI,EAAA,+EAE2Ba,EAAUC,GAFrC,OAEUZ,EAFV,OAGIgI,EAAShI,GAHb,mDAKuB,eAAf,KAAMK,KALd,sFAhBgB,kEAgChB,WAAuBb,GAAvB,eAAAM,EAAA,sEACwBe,EAAWrB,EAAMoB,GADzC,cACQuH,EADR,OAEED,IAFF,kBAGSC,EAAQ7G,IAHjB,4CAhCgB,kEA6ChB,WAAuBG,EAAMH,GAA7B,eAAAxB,EAAA,sEACwB0B,EAAWF,EAAIG,EAAMb,GAD7C,cACQuH,EADR,OAEED,IAFF,kBAGSC,EAAQ7G,IAHjB,4CA7CgB,kEAwDhB,WAAwB9B,GAAxB,eAAAM,EAAA,sEACuBsB,EAAW5B,EAAMoB,GADxC,cACQwH,EADR,OAEEF,IAFF,kBAGSE,EAAO9G,IAHhB,4CAxDgB,kEAmEhB,WAAwBG,GAAxB,eAAA3B,EAAA,sEACuB+B,EAAWJ,EAAMb,GADxC,cACQwH,EADR,OAEEF,IAFF,kBAGSE,EAAO9G,IAHhB,4CAnEgB,+BA6EDgB,EA7EC,8EA6EhB,WAA0BhB,GAA1B,SAAAxB,EAAA,0DAEI6H,OAAOC,QAAP,4DAFJ,gCAIUrG,EAAWD,EAAIV,GAJzB,OAKIsH,IACAvC,EAAQlD,KAAK,KANjB,4CA7EgB,kEA2FhB,WAA0BnB,GAA1B,SAAAxB,EAAA,0DAEI6H,OAAOC,QAAP,4DAFJ,gCAIU7F,EAAWT,EAAIV,GAJzB,OAKIsH,IALJ,4CA3FgB,sBAoGhB,OA9FAxB,qBAAU,WAGR,OAFAwB,IAEO,WACLxC,EAAgBkB,YA2FlB,eAAC,WAAD,WACE,cAAC,EAAD,IACA,qBAAK1E,UAAU,YAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOmG,OAAK,EAACP,KAAK,IAAlB,SACE,cAAC,EAAD,CAAU/D,MAAOA,EAAOzB,WAAYA,MAGtC,cAAC,IAAD,CAAOwF,KAAK,aAAZ,SACE,cAAC,EAAD,CACEnF,KAAK,OACL0C,MAAM,EACNC,QAjHI,4CAkHJI,gBAAiBA,MAIrB,cAAC,IAAD,CAAOoC,KAAK,kBAAZ,SACE,cAAC,GAAD,CACEtC,SAxHI,4CAyHJlD,WAAYA,EACZiD,QA1HI,8CA2HJE,SA3HI,4CA4HJlD,WA5HI,4CA6HJmD,gBAAiBA,MAIrB,cAAC,IAAD,UACE,cAAC,EAAD,eCrIG4C,OAZf,WACE,OACE,qBAAKpG,UAAU,aAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAO4F,KAAK,IAAZ,SACE,cAAC,GAAD,W,SCRVS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,KAAD,UACE,cAAC,GAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.3b7e286b.chunk.js","sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"jumbotron bg-dark\">\r\n      <div className=\"container text-white\">\r\n        <h1 className=\"display-4\">Full Of Think</h1>\r\n        <p className=\"lead\">Find Your Mind</p>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <div className=\"NotFound\">\r\n      <h1>Not Found</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotFound;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * A Buttons component displays buttons based off of the names passed in.\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {Array<string>} props.names - The names of the buttons to show.\r\n * @param {number} props.deckId - The id of the deck they are at.\r\n * @param {number} props.cardId - The id of the card they are at.\r\n * @param {function} props.removeDeck - Removes the deck passed in when called.\r\n * @param {function} props.removeCard - Removes the card passed in when called.\r\n * @returns {ReactElement} JSX for a Buttons component.\r\n */\r\nfunction Buttons({ names, deckId, cardId, removeDeck, removeCard }) {\r\n  const buttonsJSX = [];\r\n  for (let name of names) {\r\n    switch (name) {\r\n      case \"view\":\r\n        buttonsJSX.push(\r\n          <a key=\"view\" href={`/decks/${deckId}`}>\r\n            <button type=\"button\" className=\"btn btn-secondary mr-2\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"20\"\r\n                height=\"20\"\r\n                fill=\"currentColor\"\r\n                className=\"bi bi-eye-fill\"\r\n                viewBox=\"0 0 20 20\"\r\n              >\r\n                <path d=\"M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0z\" />\r\n                <path d=\"M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8zm8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7z\" />\r\n              </svg>\r\n              &nbsp;View\r\n            </button>\r\n          </a>\r\n        );\r\n        break;\r\n\r\n      case \"study\":\r\n        buttonsJSX.push(\r\n          <a key=\"study\" href={`/decks/${deckId}/study`}>\r\n            <button type=\"button\" className=\"btn btn-primary mr-2\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"20\"\r\n                height=\"20\"\r\n                fill=\"currentColor\"\r\n                className=\"bi bi-journal-bookmark-fill\"\r\n                viewBox=\"0 0 20 20\"\r\n              >\r\n                <path\r\n                  fillRule=\"evenodd\"\r\n                  d=\"M6 1h6v7a.5.5 0 0 1-.757.429L9 7.083 6.757 8.43A.5.5 0 0 1 6 8V1z\"\r\n                />\r\n                <path d=\"M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2z\" />\r\n                <path d=\"M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1H1z\" />\r\n              </svg>\r\n              &nbsp;Study\r\n            </button>\r\n          </a>\r\n        );\r\n        break;\r\n\r\n      case \"delete-deck\":\r\n        buttonsJSX.push(\r\n          <button\r\n            key=\"delete\"\r\n            type=\"button\"\r\n            className=\"btn btn-danger float-right\"\r\n            onClick={() => removeDeck(deckId)}\r\n          >\r\n            &nbsp;\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"20\"\r\n              height=\"20\"\r\n              fill=\"currentColor\"\r\n              className=\"bi bi-trash-fill\"\r\n              viewBox=\"0 0 20 20\"\r\n            >\r\n              <path d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\" />\r\n            </svg>\r\n          </button>\r\n        );\r\n        break;\r\n\r\n      case \"delete-card\":\r\n        buttonsJSX.push(\r\n          <button\r\n            key=\"delete\"\r\n            type=\"button\"\r\n            className=\"btn btn-danger float-right\"\r\n            onClick={() => removeCard(cardId)}\r\n          >\r\n            &nbsp;\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              width=\"20\"\r\n              height=\"20\"\r\n              fill=\"currentColor\"\r\n              className=\"bi bi-trash-fill\"\r\n              viewBox=\"0 0 20 20\"\r\n            >\r\n              <path d=\"M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1H2.5zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5zM8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5zm3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0z\" />\r\n            </svg>\r\n          </button>\r\n        );\r\n        break;\r\n\r\n      case \"edit-deck\":\r\n        buttonsJSX.push(\r\n          <a key=\"edit-deck\" href={`/decks/${deckId}/edit`}>\r\n            <button type=\"button\" className=\"btn btn-secondary mr-2\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"20\"\r\n                height=\"20\"\r\n                fill=\"currentColor\"\r\n                className=\"bi bi-pencil-fill\"\r\n                viewBox=\"0 0 20 20\"\r\n              >\r\n                <path d=\"M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z\" />\r\n              </svg>\r\n              &nbsp;Edit\r\n            </button>\r\n          </a>\r\n        );\r\n        break;\r\n\r\n      case \"edit-card\":\r\n        buttonsJSX.push(\r\n          <a key=\"edit-card\" href={`/decks/${deckId}/cards/${cardId}/edit`}>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary mr-2 float-right\"\r\n            >\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"20\"\r\n                height=\"20\"\r\n                fill=\"currentColor\"\r\n                className=\"bi bi-pencil-fill\"\r\n                viewBox=\"0 0 20 20\"\r\n              >\r\n                <path d=\"M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z\" />\r\n              </svg>\r\n              &nbsp;Edit\r\n            </button>\r\n          </a>\r\n        );\r\n        break;\r\n\r\n      case \"add-card\":\r\n        buttonsJSX.push(\r\n          <a key=\"add-card\" href={`/decks/${deckId}/cards/new`}>\r\n            <button type=\"button\" className=\"btn btn-primary mr-2\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"20\"\r\n                height=\"20\"\r\n                fill=\"currentColor\"\r\n                className=\"bi bi-plus\"\r\n                viewBox=\"0 0 20 20\"\r\n              >\r\n                <path d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\" />\r\n              </svg>\r\n              Add Cards\r\n            </button>\r\n          </a>\r\n        );\r\n        break;\r\n\r\n      case \"add-deck\":\r\n        buttonsJSX.push(\r\n          <a key=\"add-deck\" href=\"/decks/new\">\r\n            <button type=\"button\" className=\"btn btn-secondary mr-2\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"20\"\r\n                height=\"20\"\r\n                fill=\"currentColor\"\r\n                className=\"bi bi-plus\"\r\n                viewBox=\"0 0 20 20\"\r\n              >\r\n                <path d=\"M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z\" />\r\n              </svg>\r\n              Create Deck\r\n            </button>\r\n          </a>\r\n        );\r\n        break;\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  return buttonsJSX;\r\n}\r\n\r\nButtons.propTypes = {\r\n  names: PropTypes.arrayOf(\r\n    PropTypes.oneOf([\r\n      \"view\",\r\n      \"study\",\r\n      \"delete-deck\",\r\n      \"delete-card\",\r\n      \"edit-deck\",\r\n      \"edit-card\",\r\n      \"add-deck\",\r\n      \"add-card\",\r\n    ])\r\n  ).isRequired,\r\n  deckId: PropTypes.number,\r\n  cardId: PropTypes.number,\r\n  removeDeck: PropTypes.func,\r\n  removeCard: PropTypes.func,\r\n};\r\n\r\nexport default Buttons;","import React from \"react\";\r\nimport Buttons from \"../comp/Buttons\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * @param {ComponentProps} props\r\n * @param {Object} props.deck\r\n * @param {function} props.removeDeck\r\n * @returns {ReactElement}\r\n */\r\nfunction DeckPreview({ deck, removeDeck }) {\r\n  return (\r\n    <div className=\"card mt-2\" id={`deck-${deck.id}`}>\r\n      <div className=\"card-body\">\r\n        <p className=\"card-subtitle mb-2 text-muted float-right\">\r\n          {deck.cards.length} cards\r\n        </p>\r\n        <h4 className=\"card-title\">{deck.name}</h4>\r\n        <p className=\"card-text\">{deck.description}</p>\r\n        <Buttons\r\n          names={[\"view\", \"study\", \"delete-deck\"]}\r\n          deckId={deck.id}\r\n          removeDeck={removeDeck}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nDeckPreview.propTypes = {\r\n  deck: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  removeDeck: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default DeckPreview;","import React from \"react\";\r\nimport DeckPreview from \"./DeckPreview\";\r\nimport Buttons from \"../comp/Buttons\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n\r\n * @param {ComponentProps} prop\r\n * @param {Array<Object>} props.deck\r\n * @param {function} props.removeDeck\r\n * @returns {ReactElement} \r\n */\r\nfunction DeckList({ decks, removeDeck }) {\r\n  const decksJSX = decks.map((deck) => (\r\n    <DeckPreview key={deck.id} deck={deck} removeDeck={removeDeck} />\r\n  ));\r\n\r\n  return (\r\n    <div id=\"deck-list\">\r\n      <Buttons names={[\"add-deck\"]} />\r\n      {decksJSX}\r\n    </div>\r\n  );\r\n}\r\n\r\nDeckList.propTypes = {\r\n  decks: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      description: PropTypes.string.isRequired,\r\n      id: PropTypes.number.isRequired,\r\n    }).isRequired\r\n  ).isRequired,\r\n  removeDeck: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default DeckList;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * A Breadcrumb component is displayed on certain pages which provides a trail\r\n * of links the user is currently at.\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {string} props.page - The current page the user is at.\r\n * @param {string} props.deckName - The name of the deck they are in.\r\n * @param {number} props.deckId - The id of the deck they are at.\r\n * @param {number} props.cardId - The id of the card they are at.\r\n * @returns {ReactElement} JSX for a Breadcrumb component.\r\n */\r\nfunction Breadcrumb({ page, deckName, deckId, cardId }) {\r\n  /**\r\n   * Gets the appropriate text based off of their current page.\r\n   * @returns {ReactElement} JSX of an <li> element.\r\n   */\r\n  const currentPage = () => {\r\n    switch (page) {\r\n      case \"study\":\r\n        return <li className=\"breadcrumb-item active\">Study</li>;\r\n      case \"create-deck\":\r\n        return <li className=\"breadcrumb-item active\">Create Deck</li>;\r\n      case \"edit-deck\":\r\n        return <li className=\"breadcrumb-item active\">Edit Deck</li>;\r\n      case \"create-card\":\r\n        return <li className=\"breadcrumb-item active\">Add Card</li>;\r\n      case \"edit-card\":\r\n        return <li className=\"breadcrumb-item active\">Edit Card {cardId}</li>;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the deck title and adds the active class if appropriate.\r\n   * @returns {ReactElement} JSX of an <li> element.\r\n   */\r\n  const deckTitle = () => {\r\n    if (!deckName || !deckId) return null;\r\n\r\n    return (\r\n      <li className={`breadcrumb-item ${page === \"view\" ? \"active\" : \"\"}`}>\r\n        {page === \"view\" ? (\r\n          deckName\r\n        ) : (\r\n          <a href={`/decks/${deckId}`}>{deckName}</a>\r\n        )}\r\n      </li>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div id=\"deck-study\">\r\n      <nav aria-label=\"breadcrumb\">\r\n        <ol className=\"breadcrumb\">\r\n          <li className=\"breadcrumb-item\">\r\n            <a href=\"/\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                width=\"20\"\r\n                height=\"20\"\r\n                fill=\"currentColor\"\r\n                className=\"bi bi-house-door-fill\"\r\n                viewBox=\"0 0 20 20\"\r\n              >\r\n                <path d=\"M6.5 14.5v-3.505c0-.245.25-.495.5-.495h2c.25 0 .5.25.5.5v3.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5v-7a.5.5 0 0 0-.146-.354L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.354 1.146a.5.5 0 0 0-.708 0l-6 6A.5.5 0 0 0 1.5 7.5v7a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5z\" />\r\n              </svg>\r\n              Home\r\n            </a>\r\n          </li>\r\n          {deckTitle()}\r\n          {currentPage()}\r\n        </ol>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\nBreadcrumb.propTypes = {\r\n  page: PropTypes.string.isRequired,\r\n  deckName: PropTypes.string,\r\n  deckId: PropTypes.number,\r\n  cardId: PropTypes.number,\r\n};\r\n\r\nexport default Breadcrumb;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * A FormArea component displays a text area for a <form>.\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {Array<string>} props.keys - Form area ids.\r\n * @param {number} props.idx - Either 0 or 1.\r\n * @param {function} props.handleChange - Handles changes made by user when called.\r\n * @param {formData} props.formData - The current values of the form.\r\n * @returns {ReactElement} JSX for a FormArea component.\r\n */\r\nfunction FormArea({ keys, idx, handleChange, formData }) {\r\n\treturn (\r\n\t\t<div id={keys[idx]}>\r\n\t\t\t<label htmlFor={keys[idx]}>\r\n\t\t\t\t{keys[idx].charAt(0).toUpperCase() + keys[idx].slice(1)}\r\n\t\t\t</label>\r\n\r\n\t\t\t<br />\r\n\r\n\t\t{keys[idx] === \"name\" ?\r\n\t\t\t<input\r\n\t\t\t\tname=\"name\"\r\n\t\t\t\tid=\"name\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\tvalue={formData[keys[idx]]}\r\n\t\t\t\tstyle={{ width: \"100%\" }}\r\n\t\t\t/> :\r\n\t\t\t<textarea\r\n\t\t\t\tname={keys[idx]}\r\n\t\t\t\tid={keys[idx]}\r\n\t\t\t\tonChange={handleChange}\r\n\t\t\t\tvalue={formData[keys[idx]]}\r\n\t\t\t\tstyle={{ width: \"100%\" }}\r\n\t\t\t\trows=\"4\"\r\n\t\t\t/>\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nFormArea.propTypes = {\r\n\tkeys: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n\tidx: PropTypes.number.isRequired,\r\n\thandleChange: PropTypes.func.isRequired,\r\n\tformData: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default FormArea;","import React, { useState, useEffect } from \"react\";\r\nimport { useParams, useHistory } from \"react-router\";\r\nimport { readDeck, readCard } from \"../../utils/api/index\";\r\nimport Breadcrumb from \"../comp/Breadcrumb\";\r\nimport FormArea from \"./FormArea\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * A Form component is used to create and edit decks and cards.\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {string} props.type - Either \"deck\" or \"card\".\r\n * @param {boolean} props.edit - True if user is editing.\r\n * @param {function} props.addDeck - Adds the deck passed in when called.\r\n * @param {function} props.addCard - Adds the card passed in to a deck when called.\r\n * @param {function} props.editDeck - Edits the deck passed in when called.\r\n * @param {function} props.editCard - Edits the card passed in when called.\r\n * @param {AbortController} props.abortController - AbortController.\r\n * @returns {ReactElement} JSX for a Form component.\r\n */\r\nfunction Form({ type, edit, addDeck, addCard, editDeck, editCard, abortController }) {\r\n\tconst history = useHistory();\r\n\tlet { deckId, cardId } = useParams();\r\n\tconst mode = edit ? \"edit\" : \"create\";\r\n\tconst keys = type === \"deck\" ? [\"name\", \"description\"] : [\"front\", \"back\"];\r\n\r\n\tconst initForm = {\r\n\t\t[keys[0]]: \"\",\r\n\t\t[keys[1]]: \"\",\r\n\t};\r\n\r\n\tconst [deck, setDeck] = useState({});\r\n\tconst [formData, setFormData] = useState({...initForm});\r\n\r\n\t// get deck when first rendered.\r\n\tuseEffect(() => {\r\n\t\tgetDeck();\r\n\r\n\t\treturn () => {\r\n\t\t\tabortController.abort();\r\n\t\t};\r\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\r\n\t}, []);\r\n\t\r\n\t/**\r\n\t * Fetches the current deck from the database.\r\n\t */\r\n\tasync function getDeck() {\r\n\t\tif(type === \"deck\" && !edit) return;\r\n\r\n\t\ttry {\r\n\t\t\tconst response = await readDeck(deckId, abortController.signal);\r\n\t\t\tsetDeck(response);\r\n\r\n\t\t\t// update values if we are editing existing items\r\n\t\t\tif(edit) {\r\n\t\t\t\tif(response && type === \"deck\") {\r\n\t\t\t\t\tinitForm[keys[0]] = response.name;\r\n\t\t\t\t\tinitForm[keys[1]] = response.description;\r\n\t\t\t\t}\r\n\t\t\t\telse if(type === \"card\") {\r\n\t\t\t\t\tconst card = await readCard(cardId, abortController.signal);\r\n\t\t\t\t\tif(card) {\r\n\t\t\t\t\t\tinitForm[keys[0]] = card.front;\r\n\t\t\t\t\t\tinitForm[keys[1]] = card.back;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsetFormData({...initForm});\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch(error) {\r\n\t\t\tif(error.name !== \"AbortError\") {\r\n\t\t\t\tthrow error;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Handles any form change made by the user.\r\n\t * @param {Event} event - onChange event.\r\n\t * @param {EventTarget} target - The element from which this change occured.\r\n\t */\r\n\tfunction handleChange({ target }) {\r\n\t\tsetFormData({...formData, [target.name]: target.value});\r\n\t}\r\n\r\n\t/**\r\n\t * Handles any submit made by the user.\r\n\t * @param {Event} event - submit event.\r\n\t */\r\n\tasync function handleSubmit(event) {\r\n\t\tevent.preventDefault();\r\n\t\tlet newItem = {\r\n\t\t\t[keys[0]]: formData[keys[0]],\r\n\t\t\t[keys[1]]: formData[keys[1]],\r\n\t\t};\r\n\r\n\t\tif(edit) {\r\n\t\t\tnewItem[\"id\"] = type === \"deck\" ? parseInt(deckId) : parseInt(cardId);\r\n\r\n\t\t\tif(type === \"card\") {\r\n\t\t\t\tnewItem[\"deckId\"] = parseInt(deckId);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst idx = edit ?\r\n\t\t\t(type === \"deck\" ? await editDeck(newItem) : await editCard(newItem)) :\r\n\t\t\t(type === \"deck\" ? await addDeck(newItem) : await addCard(newItem, deckId));\r\n\r\n\r\n\t\tif(!edit && type === \"deck\") {\r\n\t\t\tdeckId = idx;\r\n\t\t}\r\n\r\n\t\thistory.push(`/decks/${deckId}`);\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div id={`${type}-form-${mode}`}>\r\n\t\t\t<Breadcrumb \r\n\t\t\t\tpage={`${mode}-${type}`} \r\n\t\t\t\tdeckName={deck ? deck.name : null} \r\n\t\t\t\tdeckId={parseInt(deckId)} \r\n\t\t\t\tcardId={cardId ? parseInt(cardId) : null}\r\n\t\t\t/>\r\n\r\n\t\t\t<h1>\r\n\t\t\t\t{type === \"card\" && `${deck.name}: `}\r\n\t\t\t\t{mode.charAt(0).toUpperCase() + mode.slice(1)}&nbsp;\r\n\t\t\t\t{type.charAt(0).toUpperCase() + type.slice(1)}&nbsp;\r\n\t\t\t</h1>\r\n\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<FormArea\r\n\t\t\t\t\tkeys={keys}\r\n\t\t\t\t\tidx={0}\r\n\t\t\t\t\thandleChange={handleChange}\r\n\t\t\t\t\tformData={formData}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<FormArea\r\n\t\t\t\t\tkeys={keys}\r\n\t\t\t\t\tidx={1}\r\n\t\t\t\t\thandleChange={handleChange}\r\n\t\t\t\t\tformData={formData}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<a href=\"/\">\r\n\t\t\t\t\t<button className=\"btn btn-secondary mr-1\" type=\"button\">Cancel</button>\r\n\t\t\t\t</a>\r\n\r\n\t\t\t\t<button className=\"btn btn-primary mr-1\" type=\"submit\">Submit</button>\r\n\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nForm.propTypes = {\r\n\ttype: PropTypes.oneOf([\"deck\", \"card\"]).isRequired, \r\n\tedit: PropTypes.bool.isRequired, \r\n\taddDeck: PropTypes.func,\r\n\taddCard: PropTypes.func, \r\n\teditDeck: PropTypes.func, \r\n\teditCard: PropTypes.func,\r\n\tabortController: PropTypes.instanceOf(AbortController).isRequired\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport Buttons from \"../comp/Buttons\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * A CardView component is used when viewing a deck. It shows both sides of the\r\n * card as well as buttons to delete/edit the card.\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {Object} props.card - A card object representing a flashcard.\r\n * @param {function} props.removeCard - Removes the card passed in when called.\r\n * @returns {ReactElement} JSX for a CardView component.\r\n */\r\nfunction CardView({ card, removeCard }) {\r\n  return (\r\n    <ul className=\"list-group\">\r\n      <li className=\"list-group-item\">{card.front}</li>\r\n      <li className=\"list-group-item\">{card.back}</li>\r\n      <li className=\"list-group-item\">\r\n        <Buttons\r\n          names={[\"delete-card\", \"edit-card\"]}\r\n          removeCard={removeCard}\r\n          deckId={card.deckId}\r\n          cardId={card.id}\r\n        />\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nCardView.propTypes = {\r\n  card: PropTypes.shape({\r\n    front: PropTypes.string.isRequired,\r\n    back: PropTypes.string.isRequired,\r\n    deckId: PropTypes.number.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  removeCard: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CardView;","import React, { useState, useEffect } from \"react\";\r\nimport { readDeck } from \"../../utils/api/index\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Breadcrumb from \"../comp/Breadcrumb\";\r\nimport Buttons from \"../comp/Buttons\";\r\nimport CardView from \"../card/CardView\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {function} props.removeDeck - Removes the deck passed in when called.\r\n * @param {function} props.removeCard - Removes the card passed in when called.\r\n * @param {AbortController} props.abortController - AbortController.\r\n * @returns {ReactElement} JSX for a DeckView component.\r\n */\r\nfunction DeckView({ removeDeck, removeCard, abortController }) {\r\n  const [deck, setDeck] = useState({});\r\n  const { deckId } = useParams();\r\n  useEffect(() => {\r\n    getDeck();\r\n\r\n    return () => {\r\n      abortController.abort();\r\n    };\r\n\r\n \r\n  },);\r\n\r\n\r\n  async function getDeck() {\r\n    try {\r\n      const response = await readDeck(deckId, abortController.signal);\r\n      setDeck(response);\r\n    } catch (error) {\r\n      if (error.name !== \"AbortError\") {\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (Object.keys(deck).length === 0) return null;\r\n\r\n  const cardsJSX = deck.cards.map((card) => (\r\n    <CardView key={card.id} card={card} removeCard={removeCard} />\r\n  ));\r\n\r\n  return (\r\n    <div id={`deck-${deck.id}-view`}>\r\n      <Breadcrumb deckName={deck.name} deckId={deck.id} page=\"view\" />\r\n      <h5>{deck.name}</h5>\r\n      <p>{deck.description}</p>\r\n\r\n      <Buttons\r\n        names={[\"edit-deck\", \"study\", \"add-card\", \"delete-deck\"]}\r\n        deckId={deck.id}\r\n        removeDeck={removeDeck}\r\n      />\r\n\r\n      <h3 className=\"mt-4\">Cards</h3>\r\n      {cardsJSX}\r\n    </div>\r\n  );\r\n}\r\n\r\nDeckView.propTypes = {\r\n  removeDeck: PropTypes.func,\r\n  removeCard: PropTypes.func,\r\n  abortController: PropTypes.instanceOf(AbortController).isRequired,\r\n};\r\n\r\nexport default DeckView;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * A Card component is used during a Study session. It shows the front side\r\n * and can be flipped to the back.\r\n * @param {ComponentProps} props - Properties passed in for the component.\r\n * @param {Object} props.deck - A deck object representing a stack of cards.\r\n * @param {number} props.cardNum - The index of the card.\r\n * @param {boolean} props.flipped - Whether the card is currently flipped.\r\n * @param {function} props.flip - Flips the card when called.\r\n * @param {function} props.next - Goes to the next card when called.\r\n * @returns {ReactElement} JSX for a Card component.\r\n */\r\nfunction Card({ deck, cardNum, flipped, flip, next }) {\r\n  return (\r\n    <div className=\"card mt-2\" id={`card-${deck.id}`}>\r\n      <div className=\"card-body\">\r\n        <h4 className=\"card-title\">\r\n          Card {cardNum + 1} of {deck.cards.length}\r\n        </h4>\r\n        <p className=\"card-text\">\r\n          {deck.cards[cardNum][flipped ? \"back\" : \"front\"]}\r\n        </p>\r\n        <button type=\"button\" className=\"btn btn-secondary mr-2\" onClick={flip}>\r\n          Flip\r\n        </button>\r\n        {flipped && (\r\n          <button type=\"button\" className=\"btn btn-primary mr-2\" onClick={next}>\r\n            Next\r\n          </button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nCard.propTypes = {\r\n  deck: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    description: PropTypes.string.isRequired,\r\n    id: PropTypes.number.isRequired,\r\n  }),\r\n  cardNum: PropTypes.number.isRequired,\r\n  flipped: PropTypes.bool.isRequired,\r\n  flip: PropTypes.func.isRequired,\r\n  next: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Buttons from \"../comp/Buttons\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * @param {ComponentProps} props\r\n * @param {number} length\r\n * @param {number} id\r\n * @returns {ReactElement}\r\n */\r\nfunction NotEnoughCards({ length, id }) {\r\n\treturn (\r\n\t\t<div id=\"card-error\">\r\n\t\t\t<h3>Not enough cards.</h3>\r\n\t\t\t<p>You need at least 3 cards to study. There are {length} cards in this deck.</p>\r\n\r\n\t\t\t<Buttons names={[\"add-card\"]} deckId={id} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nNotEnoughCards.propTypes = {\r\n\tlength: PropTypes.number.isRequired,\r\n\tid: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default NotEnoughCards;","import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { readDeck } from \"../../utils/api/index\";\r\nimport Breadcrumb from \"../comp/Breadcrumb\";\r\nimport Card from \"../card/Card\";\r\nimport NotEnoughCards from \"../error/NotEnoughCards\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * @param {AbortController} props.abortController - AbortController.\r\n * @returns {ReactElement} JSX for a DeckPreview component.\r\n */\r\nfunction DeckStudy({ abortController }) {\r\n  const [cardNum, setCardNum] = useState(0);\r\n  const [flipped, setFlipped] = useState(false);\r\n  const history = useHistory();\r\n  const [deck, setDeck] = useState({});\r\n  const { deckId } = useParams();\r\n\r\n\r\n  useEffect(() => {\r\n    getDeck();\r\n\r\n    return () => {\r\n      abortController.abort();\r\n    };\r\n\r\n\r\n  },);\r\n\r\n  async function getDeck() {\r\n    try {\r\n      const response = await readDeck(deckId, abortController.signal);\r\n      setDeck(response);\r\n    } catch (error) {\r\n      if (error.name !== \"AbortError\") {\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (Object.keys(deck).length === 0) return null;\r\n\r\n  if (!deck) return null;\r\n\r\n  /**\r\n   * Flips the current card.\r\n   */\r\n  function flip() {\r\n    setFlipped(!flipped);\r\n  }\r\n\r\n  function next() {\r\n    if (cardNum + 1 === deck.cards.length) {\r\n      if (\r\n        window.confirm(\r\n          `Restart cards?\\n\\nClick 'cancel' to return to the home page.`\r\n        )\r\n      ) {\r\n        setCardNum(0);\r\n      } else {\r\n        history.push(\"/\");\r\n      }\r\n    } else {\r\n      setCardNum(cardNum + 1);\r\n    }\r\n    setFlipped(false);\r\n  }\r\n\r\n  return (\r\n    <div id={`deck-${deck.id}-study`}>\r\n      <Breadcrumb deckName={deck.name} deckId={deck.id} page=\"study\" />\r\n      <h1>Study: {deck.name}</h1>\r\n\r\n      {deck.cards.length > 2 ? (\r\n        <Card\r\n          key={deck.cards[cardNum].id}\r\n          deck={deck}\r\n          cardNum={cardNum}\r\n          flipped={flipped}\r\n          flip={flip}\r\n          next={next}\r\n        />\r\n      ) : (\r\n        <NotEnoughCards length={deck.cards.length} id={deck.id} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nDeckStudy.propTypes = {\r\n  abortController: PropTypes.instanceOf(AbortController).isRequired,\r\n};\r\n\r\nexport default DeckStudy;","import React from \"react\";\r\nimport { Switch, Route, useParams } from \"react-router-dom\";\r\nimport Form from \"../form/Form\";\r\nimport DeckView from \"./DeckView\";\r\nimport DeckStudy from \"./DeckStudy\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n/**\r\n * @param {ComponentProps} props\r\n * @param {function} props.editDeck\r\n * @param {function} props.removeDeck\r\n * @param {function} props.addCard\r\n * @param {function} props.editCard \r\n * @param {function} props.removeCard\r\n * @param {AbortController} props.abortController\r\n * @returns {ReactElement} JSX for a Deck component.\r\n */\r\nfunction Deck({\r\n  editDeck,\r\n  removeDeck,\r\n  addCard,\r\n  editCard,\r\n  removeCard,\r\n  abortController,\r\n}) {\r\n  const { deckId } = useParams();\r\n\r\n  return (\r\n    <div id={`deck-${deckId}`}>\r\n      <Switch>\r\n        <Route path=\"/decks/:deckId/study\">\r\n          <DeckStudy abortController={abortController} />\r\n        </Route>\r\n\r\n        <Route path=\"/decks/:deckId/edit\">\r\n          <Form\r\n            type=\"deck\"\r\n            edit={true}\r\n            editDeck={editDeck}\r\n            abortController={abortController}\r\n          />\r\n        </Route>\r\n\r\n        <Route path=\"/decks/:deckId/cards/new\">\r\n          <Form\r\n            type=\"card\"\r\n            edit={false}\r\n            addCard={addCard}\r\n            abortController={abortController}\r\n          />\r\n        </Route>\r\n\r\n        <Route path=\"/decks/:deckId/cards/:cardId/edit\">\r\n          <Form\r\n            type=\"card\"\r\n            edit={true}\r\n            editCard={editCard}\r\n            abortController={abortController}\r\n          />\r\n        </Route>\r\n\r\n        <Route path=\"/decks/:deckId\">\r\n          <DeckView\r\n            removeDeck={removeDeck}\r\n            removeCard={removeCard}\r\n            abortController={abortController}\r\n          />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nDeck.propTypes = {\r\n  editDeck: PropTypes.func.isRequired,\r\n  removeDeck: PropTypes.func.isRequired,\r\n  addCard: PropTypes.func.isRequired,\r\n  editCard: PropTypes.func.isRequired,\r\n  removeCard: PropTypes.func.isRequired,\r\n  abortController: PropTypes.instanceOf(AbortController).isRequired,\r\n};\r\n\r\nexport default Deck;","import React, { Fragment, useState, useEffect } from \"react\";\nimport { Switch, Route, useHistory } from \"react-router-dom\";\nimport {\n  listDecks,\n  deleteDeck,\n  createDeck,\n  deleteCard,\n  updateDeck,\n  createCard,\n  updateCard,\n} from \"../utils/api/index\";\nimport Header from \"./comp/Header\";\nimport NotFound from \"./error/NotFound\";\nimport DeckList from \"./deck/DeckList\";\nimport Deck from \"./deck/Deck\";\nimport Form from \"./form/Form\";\n\n/**\n * A Layout component is the root file which routes to other components\n * appropriately.\n * @returns {ReactElement} JSX for a Layout component.\n */\n\nfunction Layout() {\n  const [decks, setDecks] = useState([]);\n  const abortController = new AbortController();\n  const signal = abortController.signal;\n  const history = useHistory();\n\n  useEffect(() => {\n    getDecks();\n\n    return () => {\n      abortController.abort();\n    };\n\n  },);\n\n\n  async function getDecks() {\n    try {\n      const response = await listDecks(signal);\n      setDecks(response);\n    } catch (error) {\n      if (error.name !== \"AbortError\") {\n        throw error;\n      }\n    }\n  }\n\n  /**\n   * Posts a deck to the database.\n   * @param {Object} deck - A deck object representing a stack of cards.\n   * @returns {number} The id of the newly created deck.\n   */\n  async function addDeck(deck) {\n    const created = await createDeck(deck, signal);\n    getDecks();\n    return created.id;\n  }\n\n  /**\n   * Posts a card in the database.\n   * @param {Object} card - A card object representing a flashcard.\n   * @param {number} id - The id of the deck to post in.\n   * @returns {number} The id of the newly edited card.\n   */\n\n  async function addCard(card, id) {\n    const created = await createCard(id, card, signal);\n    getDecks();\n    return created.id;\n  }\n\n  /**\n   * Updates a deck in the database.\n   * @param {Object} deck - A deck object representing a stack of cards.\n   * @returns {number} The id of the newly edited deck.\n   */\n  async function editDeck(deck) {\n    const edited = await updateDeck(deck, signal);\n    getDecks();\n    return edited.id;\n  }\n\n  /**\n   * Updates a card in the database.\n   * @param {Object} card - A card object representing a flashcard.\n   * @returns {number} The id of the newly edited card.\n   */\n  async function editCard(card) {\n    const edited = await updateCard(card, signal);\n    getDecks();\n    return edited.id;\n  }\n\n  /**\n   * Deletes a deck in the database.\n   * @param {Object} id - id of the deck to delete.\n   */\n  async function removeDeck(id) {\n    if (\n      window.confirm(`Delete this deck?\\n\\nYou will not be able to recover it.`)\n    ) {\n      await deleteDeck(id, signal);\n      getDecks();\n      history.push(\"/\");\n    }\n  }\n\n  /**\n   * Deletes a card in the database.\n   * @param {Object} id - id of the card to delete.\n   */\n  async function removeCard(id) {\n    if (\n      window.confirm(`Delete this card?\\n\\nYou will not be able to recover it.`)\n    ) {\n      await deleteCard(id, signal);\n      getDecks();\n    }\n  }\n\n  return (\n    <Fragment>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <DeckList decks={decks} removeDeck={removeDeck} />\n          </Route>\n\n          <Route path=\"/decks/new\">\n            <Form\n              type=\"deck\"\n              edit={false}\n              addDeck={addDeck}\n              abortController={abortController}\n            />\n          </Route>\n\n          <Route path=\"/decks/:deckId/\">\n            <Deck\n              editDeck={editDeck}\n              removeDeck={removeDeck}\n              addCard={addCard}\n              editCard={editCard}\n              removeCard={removeCard}\n              abortController={abortController}\n            />\n          </Route>\n\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Layout;","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}